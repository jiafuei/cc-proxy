# User configuration for cc-proxy
# Copy this file to ~/.cc-proxy/user.yaml and modify as needed

# Directory paths to search for external transformer modules
# These paths will be searched for custom transformer classes
transformer_paths:
  - '/path/to/custom/transformers'
  - '/another/transformer/directory'

providers:
  # Anthropic/Claude provider example
  # Handles requests to Anthropic's Claude API
  - name: 'anthropic-provider'
    api_key: 'sk-ant-api03-...'  # Your Anthropic API key
    url: 'https://api.anthropic.com/v1/messages'
    timeout: 300  # Request timeout in seconds
    transformers:
      request:
        # Optimizes cache breakpoints for Anthropic API (uses 4 max breakpoints)
        # - Removes cache from 'You are Claude' system message
        # - Adds cache to last system message and tools
        # - Adds cache breakpoints every 20 content blocks
        - class: 'app.services.transformers.anthropic.AnthropicCacheTransformer'
          params:
            max_tools_breakpoints: 1  # Maximum cache breakpoints for tools (default: 1)
        # Handles authentication headers for Anthropic API
        # API key is automatically taken from provider config
        - class: 'app.services.transformers.anthropic.AnthropicAuthTransformer'
          params: {}  # API key and URL are taken from provider config
      response:
        # Passthrough transformer for Anthropic responses (no conversion needed)
        - class: 'app.services.transformers.anthropic.AnthropicResponseTransformer'
          params: {}

  # OpenAI provider example
  # Converts Claude API format to/from OpenAI API format
  - name: 'openai-provider'
    api_key: 'sk-proj-...'  # Your OpenAI API key
    url: 'https://api.openai.com/v1/chat/completions'
    timeout: 300
    transformers:
      request:
        # Converts Claude request format to OpenAI format
        # - Handles multimodal content (images, text)
        # - Converts tools and tool_choice
        # - Converts thinking budget to reasoning effort
        # - Handles system message conversion
        - class: 'app.services.transformers.openai.OpenAIRequestTransformer'
          params: {}  # API key and URL are taken from provider config
      response:
        # Converts OpenAI response format back to Claude format
        # - Handles both streaming and non-streaming responses
        # - Converts tool calls and tool results
        # - Maps OpenAI finish reasons to Claude stop reasons
        - class: 'app.services.transformers.openai.OpenAIResponseTransformer'
          params: {}

  # Custom provider with external transformers
  # Example of using custom transformer classes from transformer_paths
  - name: 'custom-provider'
    api_key: 'custom-api-key-here'
    url: 'https://custom-api.example.com/v1'
    timeout: 300
    transformers:
      request:
        - class: 'my_transformers.CustomAuthTransformer'
          params:
            api_key: 'custom-key'
            special_header: 'value-1'
      response:
        - class: 'my_transformers.CustomResponseTransformer'
          params:
            format_style: 'enhanced'

# Model definitions - link model IDs to providers
# Each model must reference a valid provider name
# Optional aliases provide short, memorable names for use in routing
models:
  # Anthropic/Claude models
  - id: 'claude-3-5-sonnet-20241022'
    provider: 'anthropic-provider'
    alias: 'sonnet'
  - id: 'claude-3-5-haiku-20241022'
    provider: 'anthropic-provider'
    alias: 'haiku'
  - id: 'claude-3-opus-20240229'
    provider: 'anthropic-provider'
    alias: 'opus'
  
  # OpenAI models
  - id: 'gpt-4o'
    provider: 'openai-provider'
    alias: 'gpt4'
  - id: 'gpt-4o-mini'
    provider: 'openai-provider'
    alias: 'gpt4-mini'
  - id: 'o1-preview'
    provider: 'openai-provider'
    alias: 'o1'
  - id: 'o1-mini'
    provider: 'openai-provider'
    alias: 'o1-mini'
  
  # Custom models
  - id: 'custom-model-1'
    provider: 'custom-provider'
    alias: 'custom1'
  - id: 'custom-model-2'
    provider: 'custom-provider'
    alias: 'custom2'

# Request routing configuration
# Routes different types of requests to appropriate models
# You can use either model IDs or aliases defined above
routing:
  default: 'sonnet'     # Uses alias instead of 'claude-3-5-sonnet-20241022'
  planning: 'opus'      # Uses alias instead of 'claude-3-opus-20240229'
  background: 'haiku'   # Uses alias instead of 'claude-3-5-haiku-20241022'
