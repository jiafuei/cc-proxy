# Copy this file to ~/.cc-proxy/user.yaml and modify as needed

# Optional search paths where cc-proxy will look for custom transformer modules
transformer_paths:
  - '~/cc-proxy/plugins'
  - './examples/concrete/transformers'

providers:
  # Primary Anthropic/Claude provider for Claude channel traffic
  - name: 'anthropic-provider'
    base_url: 'https://api.anthropic.com'
    api_key: !env ANTHROPIC_API_KEY
    type: 'anthropic'
    timeout: 300
    capabilities:
      - 'messages'
      - 'count_tokens'

  # OpenAI Chat Completions for Claude UI and Codex fallback
  - name: 'openai-chat'
    base_url: 'https://api.openai.com'
    api_key: !env OPENAI_API_KEY
    type: 'openai'
    timeout: 240
    capabilities:
      - 'messages'

  # OpenAI Responses API dedicated to Codex channel
  - name: 'openai-responses'
    base_url: 'https://api.openai.com'
    api_key: !env OPENAI_API_KEY
    type: 'openai-responses'
    timeout: 240
    capabilities:
      - 'responses'

  # Gemini provider with Claude-channel bridge
  - name: 'gemini-provider'
    base_url: 'https://generativelanguage.googleapis.com'
    api_key: !env GEMINI_API_KEY
    type: 'gemini'
    timeout: 300
    capabilities:
      - 'messages'
      - 'count_tokens'

  # Example provider leveraging a custom transformer from transformer_paths
  - name: 'custom-anthropic'
    base_url: 'https://api.anthropic.com'
    api_key: !env CUSTOM_ANTHROPIC_KEY
    type: 'anthropic'
    timeout: 180
    capabilities:
      - 'messages'
    transformers:
      claude:
        request:
          - class: 'app.transformers.providers.claude.anthropic.ClaudeSystemMessageCleanerTransformer'
            params: {}
          - class: 'app.transformers.shared.utils.ToolDescriptionOptimizerTransformer'
            params: {}
          - class: 'my_company.transformers.SystemPromptAugmenter'
            params:
              profile: 'software-engineer'
        response:
          - class: 'app.transformers.providers.claude.anthropic.ClaudeAnthropicResponseTransformer'
            params: {}
        stream:
          - class: 'my_company.transformers.EventTapStreamTransformer'
            params:
              dump_path: '~/logs/cc-proxy/stream-events'

  # Example provider using new optional pre/post transformers (avoids redefining defaults)
  - name: 'custom-anthropic-with-addons'
    base_url: 'https://api.anthropic.com'
    api_key: !env CUSTOM_ANTHROPIC_KEY
    type: 'anthropic'
    timeout: 180
    capabilities:
      - 'messages'
    transformers:
      claude:
        # This adds pre- and post-transformers without overriding defaults
        # Omit 'request'/'response'/'stream' keys to merge with provider defaults
        pre_request:
          - class: 'my_company.transformers.CustomPreAuth'
            params:
              key: 'value'
        post_response:
          - class: 'my_company.transformers.ResponseLogger'
            params: {}

# Model definitions
models:
  # Claude channel models
  - alias: 'sonnet'
    id: 'claude-3-5-sonnet-20241022'
    provider: 'anthropic-provider'
  - alias: 'haiku'
    id: 'claude-3-5-haiku-20241022'
    provider: 'anthropic-provider'
  - alias: 'gpt4'
    id: 'gpt-4o'
    provider: 'openai-chat'
  - alias: 'gpt4-mini'
    id: 'gpt-4o-mini'
    provider: 'openai-chat'
  - alias: 'gemini'
    id: 'gemini-pro'
    provider: 'gemini-provider'
  - alias: 'custom-claude'
    id: 'claude-3-5-sonnet-20241022'
    provider: 'custom-anthropic'

  # Codex channel models (used via /codex/v1/responses)
  - alias: 'codex-openai'
    id: 'gpt-4o-mini'
    provider: 'openai-responses'
  - alias: 'codex-anthropic'
    id: 'claude-3-5-sonnet-20241022'
    provider: 'custom-anthropic'

# Request routing configuration for Claude channel
routing:
  default: 'sonnet'
  background: 'haiku'
  planning: 'gpt4'
  thinking: 'gpt4'
  plan_and_think: 'gpt4'
  builtin_tools: 'gpt4'
