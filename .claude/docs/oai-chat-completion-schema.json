{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "Create Chat Completion Request",
  "description": "Request body for the Create Chat Completion API. This API allows you to generate a completion for a chat conversation.",
  "type": "object",
  "properties": {
    "model": {
      "type": "string",
      "description": "ID of the model to use. See the [model endpoint](https://platform.openai.com/docs/api-reference/models) for available models. For example, `gpt-4o` or `gpt-3.5-turbo`.",
      "examples": [
        "gpt-4o",
        "gpt-3.5-turbo"
      ]
    },
    "messages": {
      "type": "array",
      "description": "A list of messages comprising the conversation so far. Each message object must have a `role` and `content` (or `tool_calls`/`function_call` for assistant messages, or `tool_call_id` for tool messages). [Example Python code](https://platform.openai.com/docs/guides/text-generation/chat-completions-api#message-roles).",
      "minItems": 1,
      "items": {
        "type": "object",
        "description": "A message object in the conversation.",
        "oneOf": [
          {
            "title": "SystemMessage",
            "description": "A message from the system to guide the model's behavior.",
            "type": "object",
            "properties": {
              "role": {
                "type": "string",
                "enum": [
                  "system"
                ],
                "description": "The role of the messages author, in this case `system`."
              },
              "content": {
                "type": "string",
                "description": "The contents of the system message."
              },
              "name": {
                "type": "string",
                "description": "An optional name for the participant. Provides the model with extra context about the participant. May contain a-z, A-Z, 0-9, and underscores, with a maximum length of 64 characters.",
                "pattern": "^[a-zA-Z0-9_]{1,64}$"
              }
            },
            "required": [
              "role",
              "content"
            ],
            "additionalProperties": false
          },
          {
            "title": "UserMessage",
            "description": "A message from the user.",
            "type": "object",
            "properties": {
              "role": {
                "type": "string",
                "enum": [
                  "user"
                ],
                "description": "The role of the messages author, in this case `user`."
              },
              "content": {
                "type": "string",
                "description": "The contents of the user message."
              },
              "name": {
                "type": "string",
                "description": "An optional name for the participant. Provides the model with extra context about the participant. May contain a-z, A-Z, 0-9, and underscores, with a maximum length of 64 characters.",
                "pattern": "^[a-zA-Z0-9_]{1,64}$"
              }
            },
            "required": [
              "role",
              "content"
            ],
            "additionalProperties": false
          },
          {
            "title": "AssistantMessage",
            "description": "A message from the assistant.",
            "type": "object",
            "properties": {
              "role": {
                "type": "string",
                "enum": [
                  "assistant"
                ],
                "description": "The role of the messages author, in this case `assistant`."
              },
              "content": {
                "type": [
                  "string",
                  "null"
                ],
                "description": "The contents of the assistant message. Can be null if `tool_calls` or `function_call` is present."
              },
              "name": {
                "type": "string",
                "description": "An optional name for the participant. Provides the model with extra context about the participant. May contain a-z, A-Z, 0-9, and underscores, with a maximum length of 64 characters.",
                "pattern": "^[a-zA-Z0-9_]{1,64}$"
              },
              "tool_calls": {
                "type": "array",
                "description": "The tool calls generated by the model, such as function calls.",
                "items": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "The ID of the tool call. This ID must be referenced in the tool message when the tool outputs are submitted."
                    },
                    "type": {
                      "type": "string",
                      "enum": [
                        "function"
                      ],
                      "description": "The type of tool call. Currently, only `function` is supported."
                    },
                    "function": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "description": "The name of the function to call."
                        },
                        "arguments": {
                          "type": "string",
                          "description": "The arguments to call the function with, as a JSON string. Note that the model may hallucinate parameters and call functions with arguments that do not exist. It is up to the developer to verify the arguments in the `tool_calls`."
                        }
                      },
                      "required": [
                        "name",
                        "arguments"
                      ],
                      "additionalProperties": false
                    }
                  },
                  "required": [
                    "id",
                    "type",
                    "function"
                  ],
                  "additionalProperties": false
                }
              },
              "function_call": {
                "type": "object",
                "description": "Deprecated in favor of `tool_calls`. The name and arguments of a function that should be called, as generated by the model.",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The name of the function to call."
                  },
                  "arguments": {
                    "type": "string",
                    "description": "The arguments to call the function with, as a JSON string. Note that the model may hallucinate parameters and call functions with arguments that do not exist. It is up to the developer to verify the arguments in the `function_call`."
                  }
                },
                "required": [
                  "name",
                  "arguments"
                ],
                "additionalProperties": false
              }
            },
            "required": [
              "role"
            ],
            "additionalProperties": false
          },
          {
            "title": "ToolMessage",
            "description": "A message containing the result of a tool call.",
            "type": "object",
            "properties": {
              "role": {
                "type": "string",
                "enum": [
                  "tool"
                ],
                "description": "The role of the messages author, in this case `tool`."
              },
              "content": {
                "type": "string",
                "description": "The contents of the tool message. This is the output of the tool call."
              },
              "tool_call_id": {
                "type": "string",
                "description": "Tool call that this message is responding to."
              }
            },
            "required": [
              "role",
              "content",
              "tool_call_id"
            ],
            "additionalProperties": false
          }
        ]
      }
    },
    "frequency_penalty": {
      "type": "number",
      "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model's likelihood to repeat the same line verbatim.",
      "minimum": -2,
      "maximum": 2,
      "default": 0
    },
    "logit_bias": {
      "type": "object",
      "description": "Modify the likelihood of specified tokens appearing in the completion. Accepts a JSON object that maps token IDs (specified by the tokenizer for the model) to an associated bias value from -100 to 100. Mathematically, the bias is added to the logits generated by the model prior to sampling. The exact effect will vary per model, but values between -1 and 1 should decrease or increase likelihood of selection. A value of -100 will prevent the token from being generated. A value of 100 will significantly increase the likelihood of selection.",
      "patternProperties": {
        "^[0-9]+$": {
          "type": "integer",
          "minimum": -100,
          "maximum": 100
        }
      },
      "additionalProperties": false,
      "default": {}
    },
    "logprobs": {
      "type": "boolean",
      "description": "Whether to return log probabilities of the output tokens or not. If true, returns the log probabilities of each output token, plus the `top_logprobs` most likely tokens and their log probabilities at each token position. Currently only supported on `gpt-4o` and `gpt-4-turbo` models.",
      "default": false
    },
    "top_logprobs": {
      "type": [
        "integer",
        "null"
      ],
      "description": "An integer between 0 and 5 specifying the number of most likely tokens to return at each token position, each with an associated log probability. `logprobs` must be set to `true` if this parameter is used.",
      "minimum": 0,
      "maximum": 5,
      "default": null
    },
    "max_tokens": {
      "type": [
        "integer",
        "null"
      ],
      "description": "The maximum number of tokens that can be generated in the chat completion. The token count of your prompt plus `max_tokens` cannot exceed the model's context length.",
      "minimum": 1,
      "default": null
    },
    "n": {
      "type": "integer",
      "description": "How many chat completion choices to generate for each input message. Note that you will be charged per message produced. If you want to generate more than one completion, we recommend using `n`=1 and making multiple requests in parallel. This is because `n`>1 may occasionally produce completions that are significantly lower quality than if you were to only generate one.",
      "minimum": 1,
      "maximum": 128,
      "default": 1
    },
    "presence_penalty": {
      "type": "number",
      "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model's likelihood to talk about new topics.",
      "minimum": -2,
      "maximum": 2,
      "default": 0
    },
    "response_format": {
      "type": "object",
      "description": "An object specifying the format that the model must output. Setting to `{ \"type\": \"json_object\" }` enables JSON mode, which guarantees the message the model generates is valid JSON. Note that the model may still generate invalid JSON if the schema is not provided or if the model is unable to adhere to the schema. Also note that the model's output may be truncated if `max_tokens` is set too low.",
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "text",
            "json_object"
          ],
          "description": "Must be one of `text` or `json_object`."
        }
      },
      "required": [
        "type"
      ],
      "default": {
        "type": "text"
      },
      "additionalProperties": false
    },
    "seed": {
      "type": [
        "integer",
        "null"
      ],
      "description": "If specified, our system will make a best effort to sample deterministically, such that repeated requests with the same `seed` and parameters should return the same result. Determinism is not guaranteed, and you should refer to the `system_fingerprint` response parameter to monitor changes in the backend.",
      "default": null
    },
    "service_tier": {
      "type": "string",
      "description": "Specifies the service tier to use for the request. This parameter is only applicable for `gpt-4o` and `gpt-4-turbo` models.",
      "enum": [
        "auto",
        "default",
        "scale"
      ],
      "default": "auto"
    },
    "stop": {
      "oneOf": [
        {
          "type": "string",
          "description": "A single stop sequence."
        },
        {
          "type": "array",
          "items": {
            "type": "string"
          },
          "maxItems": 4,
          "description": "An array of up to 4 stop sequences."
        }
      ],
      "description": "Up to 4 sequences where the API will stop generating further tokens. The returned text will not contain the stop sequence.",
      "default": null
    },
    "stream": {
      "type": "boolean",
      "description": "If set, partial message deltas will be sent, like in ChatGPT. Tokens will be sent as data-only [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format) as they become available, with the `data: [DONE]` message signifying the end of the stream.",
      "default": false
    },
    "temperature": {
      "type": "number",
      "description": "What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. We generally recommend altering this or `top_p` but not both.",
      "minimum": 0,
      "maximum": 2,
      "default": 1
    },
    "tool_choice": {
      "oneOf": [
        {
          "type": "string",
          "enum": [
            "none",
            "auto"
          ],
          "description": "`none` means the model will not call a tool and instead generates a message. `auto` means the model can pick between generating a message or calling a tool."
        },
        {
          "type": "object",
          "description": "Forces the model to call a specific tool.",
          "properties": {
            "type": {
              "type": "string",
              "enum": [
                "function"
              ],
              "description": "The type of the tool. Currently, only `function` is supported."
            },
            "function": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "description": "The name of the function to call."
                }
              },
              "required": [
                "name"
              ],
              "additionalProperties": false
            }
          },
          "required": [
            "type",
            "function"
          ],
          "additionalProperties": false
        }
      ],
      "description": "Controls which (if any) tool is called by the model. `none` is the default when no tools are provided. `auto` is the default if tools are provided.",
      "default": "auto"
    },
    "tools": {
      "type": "array",
      "description": "A list of tools the model may call. Currently, only functions are supported as tools. Use this to provide a list of functions the model may generate JSON inputs for.",
      "items": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "function"
            ],
            "description": "The type of the tool. Currently, only `function` is supported."
          },
          "function": {
            "type": "object",
            "properties": {
              "description": {
                "type": "string",
                "description": "A description of the function to help the model understand when and how to call it."
              },
              "name": {
                "type": "string",
                "description": "The name of the function to be called. Must be a-z, A-Z, 0-9, or underscores, with a maximum length of 64.",
                "pattern": "^[a-zA-Z0-9_]{1,64}$"
              },
              "parameters": {
                "type": "object",
                "description": "The parameters the function accepts, described as a JSON Schema object. See the [guide](https://platform.openai.com/docs/guides/function-calling/json-schema-reference) for examples, and the [JSON Schema reference](https://json-schema.org/understanding-json-schema/) for documentation about the format. To describe a function that takes no parameters, you can use `{\"type\": \"object\", \"properties\": {}}`.",
                "default": {
                  "type": "object",
                  "properties": {}
                }
              }
            },
            "required": [
              "name",
              "parameters"
            ],
            "additionalProperties": false
          }
        },
        "required": [
          "type",
          "function"
        ],
        "additionalProperties": false
      },
      "default": []
    },
    "top_p": {
      "type": "number",
      "description": "An alternative to sampling with `temperature`, called nucleus sampling, where the model considers the results of the tokens with `top_p` probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered. We generally recommend altering this or `temperature` but not both.",
      "minimum": 0,
      "maximum": 1,
      "default": 1
    },
    "user": {
      "type": "string",
      "description": "A unique identifier for the end-user, which can help OpenAI to monitor and detect abuse."
    },
    "function_call": {
      "oneOf": [
        {
          "type": "string",
          "enum": [
            "none",
            "auto"
          ],
          "description": "`none` means the model will not call a function and instead generates a message. `auto` means the model can pick between generating a message or calling a function."
        },
        {
          "type": "object",
          "description": "Forces the model to call a specific function.",
          "properties": {
            "name": {
              "type": "string",
              "description": "The name of the function to call."
            }
          },
          "required": [
            "name"
          ],
          "additionalProperties": false
        }
      ],
      "description": "Deprecated in favor of `tool_choice`. Controls how the model responds to function calls. `none` is the default when no functions are provided. `auto` is the default if functions are provided.",
      "default": "auto"
    },
    "functions": {
      "type": "array",
      "description": "Deprecated in favor of `tools`. A list of functions the model may generate JSON inputs for.",
      "items": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string",
            "description": "A description of the function to help the model understand when and how to call it."
          },
          "name": {
            "type": "string",
            "description": "The name of the function to be called. Must be a-z, A-Z, 0-9, or underscores, with a maximum length of 64.",
            "pattern": "^[a-zA-Z0-9_]{1,64}$"
          },
          "parameters": {
            "type": "object",
            "description": "The parameters the function accepts, described as a JSON Schema object. See the [guide](https://platform.openai.com/docs/guides/function-calling/json-schema-reference) for examples, and the [JSON Schema reference](https://json-schema.org/understanding-json-schema/) for documentation about the format. To describe a function that takes no parameters, you can use `{\"type\": \"object\", \"properties\": {}}`.",
            "default": {
              "type": "object",
              "properties": {}
            }
          }
        },
        "required": [
          "name",
          "parameters"
        ],
        "additionalProperties": false
      },
      "default": []
    }
  },
  "required": [
    "model",
    "messages"
  ],
  "additionalProperties": false
}
